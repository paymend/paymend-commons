name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

env:
  JAVA_VERSION: '21'

jobs:
  create-release:
    name: Create and Deploy Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
    - name: Calculate next version
      id: next_version
      run: |
        CURRENT="${{ steps.current_version.outputs.current }}"
        
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          NEW_VERSION="${{ github.event.inputs.custom_version }}"
        else
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ github.event.inputs.version_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Next version: $NEW_VERSION"
        
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.next_version.outputs.version }}
        mvn versions:commit
        
    - name: Run tests
      run: mvn clean test
      
    - name: Build release JAR
      run: mvn clean package -DskipTests
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Configure Maven for Artifact Registry
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
                <server>
                    <id>artifact-registry</id>
                </server>
            </servers>
        </settings>
        EOF
        
    - name: Deploy release to Artifact Registry
      run: mvn deploy -DskipTests
      
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
        fi
        
        # Create changelog
        CHANGELOG="## Changes in v${{ steps.next_version.outputs.version }}

        $COMMITS

        ## Maven Coordinates
        \`\`\`xml
        <dependency>
            <groupId>com.paymend</groupId>
            <artifactId>paymend-commons</artifactId>
            <version>${{ steps.next_version.outputs.version }}</version>
        </dependency>
        \`\`\`

        ## Artifact Registry
        \`\`\`
        artifactregistry://us-central1-maven.pkg.dev/ujy-nmi-compatible-api/paymend-maven-repo
        \`\`\`"
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Commit version bump
      run: |
        git add pom.xml
        git commit -m "Bump version to ${{ steps.next_version.outputs.version }}

        ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

        Co-Authored-By: Claude <noreply@anthropic.com>"
        
    - name: Create and push tag
      run: |
        git tag -a "v${{ steps.next_version.outputs.version }}" -m "Release v${{ steps.next_version.outputs.version }}"
        git push origin main
        git push origin "v${{ steps.next_version.outputs.version }}"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.next_version.outputs.version }}
        release_name: v${{ steps.next_version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        
    - name: Upload JAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/paymend-commons-${{ steps.next_version.outputs.version }}.jar
        asset_name: paymend-commons-${{ steps.next_version.outputs.version }}.jar
        asset_content_type: application/java-archive
        
    - name: Update to next SNAPSHOT version
      run: |
        NEXT_SNAPSHOT="${{ steps.next_version.outputs.version }}"
        IFS='.' read -ra VERSION_PARTS <<< "$NEXT_SNAPSHOT"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=$((${VERSION_PARTS[2]} + 1))
        NEXT_SNAPSHOT_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
        
        mvn versions:set -DnewVersion=$NEXT_SNAPSHOT_VERSION
        mvn versions:commit
        
        git add pom.xml
        git commit -m "Prepare for next development iteration: $NEXT_SNAPSHOT_VERSION

        ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

        Co-Authored-By: Claude <noreply@anthropic.com>"
        git push origin main